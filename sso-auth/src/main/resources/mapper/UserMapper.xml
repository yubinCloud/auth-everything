<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.ssoauth.mapper.UserMapper">

    <resultMap id="UserDao" type="com.example.ssoauth.dao.result.UserDao">
            <id property="id" column="id" jdbcType="BIGINT"/>
            <result property="username" column="username" jdbcType="VARCHAR"/>
            <result property="password" column="password" jdbcType="VARCHAR"/>
            <result property="screenName" column="screen_name" jdbcType="VARCHAR"/>
            <result property="roleList" column="role_list" jdbcType="OTHER" javaType="cn.hutool.json.JSONArray" typeHandler="com.example.ssoauth.mybatis.JsonTypeHandler"/>
            <result property="permissionList" column="permission_list" jdbcType="OTHER" javaType="cn.hutool.json.JSONArray" typeHandler="com.example.ssoauth.mybatis.JsonTypeHandler"/>
            <result property="note" column="note" jdbcType="VARCHAR"/>
            <result property="createTime" column="create_time" jdbcType="BIGINT"/>
            <result property="mobile" column="mobile" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="UserDao_ColumnList">
        id,username,password,
        screen_name,role_list,permission_list, note, create_time, mobile
    </sql>


    <insert id="insert" parameterType="com.example.ssoauth.dao.param.NewUserDao">
        insert into user
        ( id,username,password
        ,screen_name
        ,role_list,permission_list,note,create_time,mobile
        )
        values (#{id,jdbcType=BIGINT},#{username,jdbcType=VARCHAR},#{password,jdbcType=VARCHAR},
                #{screenName,jdbcType=VARCHAR},
                #{roleList,jdbcType=VARCHAR},#{permissionList,jdbcType=VARCHAR},#{note,jdbcType=VARCHAR},
                UNIX_TIMESTAMP(),#{mobile,jdbcType=VARCHAR}
               )
    </insert>

    <select id="selectByCond" parameterType="com.example.ssoauth.dao.param.UserSelectCond" resultMap="UserDao">
        select
            <include refid="UserDao_ColumnList"></include>
        from user as u
        <where>
            <if test="username != null">
                and u.username LIKE #{username}
            </if>
            <if test="screenName != null">
                and screen_name LIKE #{screenName}
            </if>
            <if test="note != null">
                and note like #{note}
            </if>
            <if test="mobile != null">
                and mobile = #{mobile}
            </if>
        </where>
    </select>

    <select id="selectByUsername" parameterType="java.lang.String" resultMap="UserDao">
        SELECT
        <include refid="UserDao_ColumnList" />
        FROM user
        where username = #{username}
    </select>

    <delete id="deleteByUsername" parameterType="java.lang.String">
        delete
        from user
        where username = #{username,jdbcType=VARCHAR}
    </delete>

    <update id="updateUserInfo" parameterType="com.example.ssoauth.dao.param.UpdateUserParam">
        update user
        <set>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="screenName != null">
                screen_name = #{screenName},
            </if>
            <if test="note != null">
                note = #{note},
            </if>
            <if test="mobile != null">
                mobile = #{mobile}
            </if>
        </set>
        where username = #{username,jdbcType=VARCHAR}
    </update>

    <update id="appendPermission" parameterType="com.example.ssoauth.dao.param.PermissionInsertParam">
        update user
        set permission_list = json_merge(permission_list, #{permissionList})
        where username = #{username,jdbcType=VARCHAR}
    </update>

    <update id="deletePermission" parameterType="com.example.ssoauth.dao.param.DeleteUserPermissionParam">
        update user
        set permission_list = JSON_REMOVE(permission_list, JSON_UNQUOTE(JSON_SEARCH(permission_list, 'one', #{permission})))
        where username = #{username} and JSON_SEARCH(permission_list, 'one', #{permission});
    </update>
</mapper>

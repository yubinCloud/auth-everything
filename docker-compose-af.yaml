version: '3'
services:
  # ********************************************************
  # ********************** DB ******************************
  # ********************************************************
  af-postgresql:
    image: postgres:16-alpine
    environment:
      - POSTGRES_PASSWORD=root
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./api-factory/af-postgresql/volume/data:/var/lib/postgresql/data
    expose:
      - 5432
    ports:
      - 5342:5342
    networks:
      - platform-net
    
  af-adminer:
    image: adminer
    restart: always
    networks:
      - platform-net
  
  # ********************************************************
  # ******************** APISIX ****************************
  # ********************************************************
  af-apisix-dashboard:
    image: apache/apisix-dashboard:3.0.1-alpine
    restart: always
    volumes:
      - ./api-factory/af-apisix/dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
      - "9000:9000"
    networks:
      - platform-net

  af-apisix:
    image: apache/apisix:${APISIX_IMAGE_TAG:-3.5.0-debian}
    restart: always
    volumes:
      - ./api-factory/af-apisix/apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ports:
      - "9180:9180/tcp"
      - "9080:9080/tcp"
      - "9091:9091/tcp"
      - "9443:9443/tcp"
      - "9092:9092/tcp"
    networks:
      - platform-net

  af-etcd:
    image: bitnami/etcd:3.4.15
    restart: always
    volumes:
      - ./af-apisix/af-ectd/volume/data:/bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://af-etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "2379:2379/tcp"
    networks:
      - platform-net

  af-prometheus:
    image: prom/prometheus:v2.25.0
    restart: always
    volumes:
      - ./api-factory/af-apisix/prometheus_conf/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - platform-net

  af-grafana:
    image: grafana/grafana:7.3.7
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - "./api-factory/af-apisix/grafana_conf/provisioning:/etc/grafana/provisioning"
      - "./api-factory/af-apisix/grafana_conf/dashboards:/var/lib/grafana/dashboards"
      - "./api-factory/af-apisix/grafana_conf/config/grafana.ini:/etc/grafana/grafana.ini"
    networks:
      - platform-net

  # ********************************************************
  # ******************** DynamicAPI ************************
  # ********************************************************
  af-dynamicapi-worker:
    build:
      context: ./api-factory/af-dynamicapi/worker
    container_name: af-dynamicapi-worker
    hostname: af-dynamicapi-worker
    image: af-dynamicapi-worker
    expose:
      - 7100
    environment:
      - ENV_FOR_DYNACONF=production
    healthcheck:
      test: ["CMD", "wget http://127.0.0.1:7100/health/live -q -O /dev/null"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - platform-net

  # ********************************************************
  # ********************** askari  *************************
  # ********************************************************
  af-askari:
    build:
      context: ./af-askari
    container_name: af-askari
    hostname: af-askari
    image: af-askari
    expose:
      - 10510
    networks:
      - platform-net
  
  # ********************************************************
  # ************** encryption-gateway **********************
  # ********************************************************
  af-encryption-gateway:
    build:
      context: ./api-factory/af-encryption-gateway
    container_name: af-encryption-gateway
    hostname: af-encryption-gateway
    image: af-encryption-gateway
    ports:
      - 10500:10500
    env_file:
      - ./.env
    networks:
      - platform-net
  
  # ********************************************************
  # ******************** sidecars **************************
  # ********************************************************
  sidecar-af-askari:
    build:
      context: ./alibaba-sidecars/af-askari
    container_name: ${PROJECT_PREFIX}-sidecar-af-askari
    hostname: sidecar-af-askari
    image: ${PROJECT_PREFIX}-sidecar-af-askari
    expose:
      - ${SIDECAR_AF_ASKARI_PORT}
    env_file:
      - ./.env
    environment:
      - APP_PORT=${SIDECAR_AF_ASKARI_PORT}
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - platform-net
  
  sidecar-dynamicapi:
    build:
      context: ./alibaba-sidecars/dynamic-api
    container_name: ${PROJECT_PREFIX}-sidecar-dynamicapi
    hostname: sidecar-dynamicapi
    image: ${PROJECT_PREFIX}-sidecar-dynamicapi
    expose:
      - ${SIDECAR_DYNAMICAPI_PORT}
    env_file:
      - ./.env
    environment:
      - APP_PORT=${SIDECAR_DYNAMICAPI_PORT}
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - platform-net